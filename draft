/modules/index
export const name = 'modules'

/modules/repos
import { name as parentName } from '../';
export const name = parentName + '/repos';

createModel(reducer$, name);







const createModel(reducer$) => {
  return withDevTools(createModel(reducer$))
}

const model$ = createModel(reducer$);
const model$ = withDevTools(withStorage(createModel(reducer$)))

// withDevTools is used for state replacing in time travelling

const createStorage = (prefix) => {
  // generalise this logic, it's for global store input
  // for global store output use rootReducer$ from current react-boilerplate
  let i = 0;
  return function(model$) {
    const storageModel$ = withStorage(model$, prefix + i)
    i = i + 1;
    return storageModel$;
  }
}

function withStorage(key, model$) {
  return new Observable((next) => {
    const storageData = localStorage.getItem(key);

    next(storageData);

    model$.skip(1).subscribe((state) => {
      next(state);
      setStorageData(state, key)
    })
  })
}

withLoggedAction(createAction(), title);

const withLoggedAction = (action$, title = 'Unnamed action') => {
  action$.observe(() => {
    actions.push(title);
  });
  return action$;
}